{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageName": {
      "type": "string",
      "defaultValue": "[concat('storage', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Provide a unique name for the Blob Storage account."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Provide a location for the Blob Storage account that supports Event Grid."
      }
    },
    "eventSubName": {
      "type": "string",
      "defaultValue": "subToStorage",
      "metadata": {
        "description": "Provide a name for the Event Grid subscription."
      }
    },
    "endpoint": {
      "type": "string",
      "defaultValue": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2018-02-01').defaultHostName]",
      "metadata": {
        "description": "Provide the URL for the WebHook to receive events. Create your own endpoint for events."
      }
    },
    "systemTopicName": {
      "type": "String",
      "defaultValue": "mystoragesystemtopic",
      "metadata": {
        "description": "Provide a name for the system topic."
      }
    },
    "storageAccountNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ]
    },
    "wsStorageAccountName": {
      "type": "string",
      "defaultValue": "[concat('sa',uniqueString(resourceGroup().id))]"
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGZRS"
      ]
    },
    "wsStorageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "applicationInsightsNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ]
    },
    "applicationInsightsName": {
      "type": "string",
      "defaultValue": "[concat('ai',uniqueString(resourceGroup().id))]"
    },
    "applicationInsightsResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "functionAppName": {
      "defaultValue": "fappDeploy",
      "type": "string",
      "metadata": {
        "description": "Name use as base-template to named the resources to be deployed in Azure."
      }
    },
    "functionGitHubURL": {
      "type": "string",
      "metadata": {
        "description": "The URL of GitHub (ending by .git)"
      }
    },
    "functionGitHubBranch": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "Name of the branch to use when deploying (Default = master)."
      }
    },
    "ExpireOn": {
      "type": "string",
      "defaultValue": "[utcNow('yyyy-MM-dd')]",
      "metadata": {
        "description": "Just a text value (format: yyyy-MM-dd) that express when it is safe to delete these resources"
      }
    },
    "ownerName": {
      "type": "string",
      "defaultValue": "mlops",
      "metadata": {
        "description": "Owner of this deployment, person to contact for question."
      }
    },
    "eventGridSubscriptionName": {
      "type": "string",
      "defaultValue": "EventGridSubscriptionName",
      "metadata": {
        "description": "The prefix of the Event Grid custom topic's subscription."
      }
    },
    "functionAppResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]"
    },
    "functionName": {
      "type": "string",
      "defaultValue": "GridEventHandle"
    },
    "functionFolder": {
      "type": "string",
      "metadata": {
        "description": "The name of folder containing the function code."
      }
    },
    "patToken": {
      "type": "string",
      "defaultValue": "temppat",
      "metadata": {
        "description": "The name of folder containing the function code."
      }
    },
    "repo_name": {
      "type": "string",
      "defaultValue": "vivishno/aml_infra-1",
      "metadata": {
        "description": "The name of repo."
      }
    }
  },
  "variables": {
    "subscription_id": "[subscription().subscriptionId]",
    "suffix": "[substring(toLower(uniqueString(resourceGroup().id, resourceGroup().location)),0,5)]",
    "funcAppName": "[toLower(concat(parameters('functionAppName'), variables('suffix')))]",
    "funcStorageAccountName": "[tolower(concat(substring(parameters('functionAppName'), 0, min(length(parameters('functionAppName')),16)), variables('suffix'), 'stg'))]",
    "funcHhostingPlanName": "[concat(substring(parameters('functionAppName'), 0, min(length(parameters('functionAppName')),14)), variables('suffix'), 'plan')]",
    "insightsAppName": "[concat(substring(parameters('functionAppName'), 0, min(length(parameters('functionAppName')),14)), variables('suffix'), '-meta')]",
    "functionProjectFolder": "[parameters('functionFolder')]",
    "functionUrl": "[concat('https://', variables('funcAppName'),'.azurewebsites.net/api/', parameters('functionName'),'?code=')]",
    "tenantId": "[subscription().tenantId]",
    "wsStorageAccount": "[resourceId(parameters('wsStorageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('wsStorageAccountName'))]",
    "applicationInsights": "[resourceId(parameters('applicationInsightsResourceGroupName'), 'Microsoft.Insights/components', parameters('applicationInsightsName'))]"  },
  "resources": [
    {
      "apiVersion": "2018-11-01",
      "name": "[variables('funcAppName')]",
      "type": "Microsoft.Web/sites",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "[resourceGroup().location]",
      "tags": {
        "Owner": "[parameters('ownerName')]",
        "ExpireOn": "[parameters('ExpireOn')]"
      },
      "dependsOn": [
        "[concat('microsoft.insights/components/', variables('insightsAppName'))]",
        "[concat('Microsoft.Web/serverfarms/', variables('funcHhostingPlanName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('funcStorageAccountName'))]"
      ],
      "properties": {
        "name": "[variables('funcAppName')]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('insightsAppName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('insightsAppName')), '2015-05-01').ConnectionString]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('funcStorageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('funcStorageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('funcStorageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('funcStorageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[concat(variables('funcAppName'), 'ba91')]"
            },
            {
              "name": "PROJECT",
              "value": "[variables('functionProjectFolder')]"
            },
            {
              "name": "FUNCTIONS_V2_COMPATIBILITY_MODE",
              "value": "true"
            },
            {
              "name": "PAT_TOKEN",
              "value": "[parameters('patToken')]"
            }
          ]
        },
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('funcHhostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": true
      },
      "resources": [
        {
          "apiVersion": "2018-11-01",
          "type": "sourcecontrols",
          "name": "web",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('funcAppName'))]"
          ],
          "properties": {
            "repoUrl": "[parameters('functionGitHubURL')]",
            "branch": "[parameters('functionGitHubBranch')]",
            "publishRunbook": true,
            "IsManualIntegration": true
          }
        }
      ]
    },
    {
      "apiVersion": "2018-11-01",
      "name": "[variables('funcHhostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      "kind": "",
      "tags": {
        "Owner": "[parameters('ownerName')]",
        "ExpireOn": "[parameters('ExpireOn')]"
      },
      "properties": {
        "name": "[variables('funcHhostingPlanName')]",
        "computeMode": "Dynamic"
      },
      "sku": {
        "Tier": "Dynamic",
        "Name": "Y1"
      }
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('insightsAppName')]",
      "type": "microsoft.insights/components",
      "location": "[resourceGroup().location]",
      "tags": {
        "Owner": "[parameters('ownerName')]",
        "ExpireOn": "[parameters('ExpireOn')]"
      },
      "kind": "",
      "properties": {
        "Application_Type": "web",
        "ApplicationId": "[variables('funcAppName')]",
        "Request_Source": "rest"
      }
    },
    {
      "apiVersion": "2019-06-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('funcStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "condition": "[equals(parameters('storageAccountNewOrExisting'), 'new')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-04-01",
      "name": "[parameters('wsStorageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      },
      "kind": "StorageV2",
      "properties": {
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "supportsHttpsTrafficOnly": true
      }
    },
    {
      "name": "[parameters('systemTopicName')]",
      "type": "Microsoft.EventGrid/systemTopics",
      "apiVersion": "2020-04-01-preview",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[parameters('storageName')]"
      ],
      "properties": {
        "source": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageName'))]",
        "topicType": "Microsoft.Storage.StorageAccounts"
      }
    },
    {
      "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
      "apiVersion": "2020-04-01-preview",
      "name": "[concat(parameters('systemTopicName'), '/', parameters('eventSubName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/systemTopics', parameters('systemTopicName'))]"
      ],
      "properties": {
        "destination": {
          "properties": {
            "endpointUrl": "[parameters('endpoint')]"
          },
          "endpointType": "WebHook"
        },
        "filter": {
          "includedEventTypes": [
            "Microsoft.Storage.BlobCreated",
            "Microsoft.Storage.BlobDeleted"
          ]
        }
      }
    }
  ],
  "outputs": {}
}
